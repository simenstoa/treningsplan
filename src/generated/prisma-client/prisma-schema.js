module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AdvancedSession {
  id: ID!
  title: String
  purpose: String
  day: Int
  createdBy: User!
  week(where: WeekWhereInput, orderBy: WeekOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Week!]
  sets(where: SetWhereInput, orderBy: SetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Set!]
  pauses(where: PauseWhereInput, orderBy: PauseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pause!]
}

type AdvancedSessionConnection {
  pageInfo: PageInfo!
  edges: [AdvancedSessionEdge]!
  aggregate: AggregateAdvancedSession!
}

input AdvancedSessionCreateInput {
  title: String
  purpose: String
  day: Int
  createdBy: UserCreateOneInput!
  week: WeekCreateManyInput
  sets: SetCreateManyInput
  pauses: PauseCreateManyInput
}

type AdvancedSessionEdge {
  node: AdvancedSession!
  cursor: String!
}

enum AdvancedSessionOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  purpose_ASC
  purpose_DESC
  day_ASC
  day_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AdvancedSessionPreviousValues {
  id: ID!
  title: String
  purpose: String
  day: Int
}

type AdvancedSessionSubscriptionPayload {
  mutation: MutationType!
  node: AdvancedSession
  updatedFields: [String!]
  previousValues: AdvancedSessionPreviousValues
}

input AdvancedSessionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AdvancedSessionWhereInput
  AND: [AdvancedSessionSubscriptionWhereInput!]
  OR: [AdvancedSessionSubscriptionWhereInput!]
  NOT: [AdvancedSessionSubscriptionWhereInput!]
}

input AdvancedSessionUpdateInput {
  title: String
  purpose: String
  day: Int
  createdBy: UserUpdateOneRequiredInput
  week: WeekUpdateManyInput
  sets: SetUpdateManyInput
  pauses: PauseUpdateManyInput
}

input AdvancedSessionUpdateManyMutationInput {
  title: String
  purpose: String
  day: Int
}

input AdvancedSessionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  purpose: String
  purpose_not: String
  purpose_in: [String!]
  purpose_not_in: [String!]
  purpose_lt: String
  purpose_lte: String
  purpose_gt: String
  purpose_gte: String
  purpose_contains: String
  purpose_not_contains: String
  purpose_starts_with: String
  purpose_not_starts_with: String
  purpose_ends_with: String
  purpose_not_ends_with: String
  day: Int
  day_not: Int
  day_in: [Int!]
  day_not_in: [Int!]
  day_lt: Int
  day_lte: Int
  day_gt: Int
  day_gte: Int
  createdBy: UserWhereInput
  week_every: WeekWhereInput
  week_some: WeekWhereInput
  week_none: WeekWhereInput
  sets_every: SetWhereInput
  sets_some: SetWhereInput
  sets_none: SetWhereInput
  pauses_every: PauseWhereInput
  pauses_some: PauseWhereInput
  pauses_none: PauseWhereInput
  AND: [AdvancedSessionWhereInput!]
  OR: [AdvancedSessionWhereInput!]
  NOT: [AdvancedSessionWhereInput!]
}

input AdvancedSessionWhereUniqueInput {
  id: ID
}

type AggregateAdvancedSession {
  count: Int!
}

type AggregateBout {
  count: Int!
}

type AggregateIntensity {
  count: Int!
}

type AggregatePause {
  count: Int!
}

type AggregatePhase {
  count: Int!
}

type AggregatePlan {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateSet {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWeek {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Bout {
  intensity: Intensity
  duration: Int
  length: Int
  order: Int!
  set: Set!
}

type BoutConnection {
  pageInfo: PageInfo!
  edges: [BoutEdge]!
  aggregate: AggregateBout!
}

input BoutCreateInput {
  intensity: IntensityCreateOneInput
  duration: Int
  length: Int
  order: Int!
  set: SetCreateOneWithoutBoutsInput!
}

input BoutCreateManyWithoutSetInput {
  create: [BoutCreateWithoutSetInput!]
}

input BoutCreateWithoutSetInput {
  intensity: IntensityCreateOneInput
  duration: Int
  length: Int
  order: Int!
}

type BoutEdge {
  node: Bout!
  cursor: String!
}

enum BoutOrderByInput {
  duration_ASC
  duration_DESC
  length_ASC
  length_DESC
  order_ASC
  order_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BoutPreviousValues {
  duration: Int
  length: Int
  order: Int!
}

input BoutScalarWhereInput {
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  length: Int
  length_not: Int
  length_in: [Int!]
  length_not_in: [Int!]
  length_lt: Int
  length_lte: Int
  length_gt: Int
  length_gte: Int
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [BoutScalarWhereInput!]
  OR: [BoutScalarWhereInput!]
  NOT: [BoutScalarWhereInput!]
}

type BoutSubscriptionPayload {
  mutation: MutationType!
  node: Bout
  updatedFields: [String!]
  previousValues: BoutPreviousValues
}

input BoutSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BoutWhereInput
  AND: [BoutSubscriptionWhereInput!]
  OR: [BoutSubscriptionWhereInput!]
  NOT: [BoutSubscriptionWhereInput!]
}

input BoutUpdateManyDataInput {
  duration: Int
  length: Int
  order: Int
}

input BoutUpdateManyMutationInput {
  duration: Int
  length: Int
  order: Int
}

input BoutUpdateManyWithoutSetInput {
  create: [BoutCreateWithoutSetInput!]
  deleteMany: [BoutScalarWhereInput!]
  updateMany: [BoutUpdateManyWithWhereNestedInput!]
}

input BoutUpdateManyWithWhereNestedInput {
  where: BoutScalarWhereInput!
  data: BoutUpdateManyDataInput!
}

input BoutWhereInput {
  intensity: IntensityWhereInput
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  length: Int
  length_not: Int
  length_in: [Int!]
  length_not_in: [Int!]
  length_lt: Int
  length_lte: Int
  length_gt: Int
  length_gte: Int
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  set: SetWhereInput
  AND: [BoutWhereInput!]
  OR: [BoutWhereInput!]
  NOT: [BoutWhereInput!]
}

type Intensity {
  id: ID!
  title: String!
  description: String
  type: IntensityType
  coefficient: Float!
}

type IntensityConnection {
  pageInfo: PageInfo!
  edges: [IntensityEdge]!
  aggregate: AggregateIntensity!
}

input IntensityCreateInput {
  title: String!
  description: String
  type: IntensityType
  coefficient: Float!
}

input IntensityCreateOneInput {
  create: IntensityCreateInput
  connect: IntensityWhereUniqueInput
}

type IntensityEdge {
  node: Intensity!
  cursor: String!
}

enum IntensityOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
  coefficient_ASC
  coefficient_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type IntensityPreviousValues {
  id: ID!
  title: String!
  description: String
  type: IntensityType
  coefficient: Float!
}

type IntensitySubscriptionPayload {
  mutation: MutationType!
  node: Intensity
  updatedFields: [String!]
  previousValues: IntensityPreviousValues
}

input IntensitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IntensityWhereInput
  AND: [IntensitySubscriptionWhereInput!]
  OR: [IntensitySubscriptionWhereInput!]
  NOT: [IntensitySubscriptionWhereInput!]
}

enum IntensityType {
  Interval
  Hard
  Repetition
  Easy
  Long
  Threshold
  MarathonPace
}

input IntensityUpdateInput {
  title: String
  description: String
  type: IntensityType
  coefficient: Float
}

input IntensityUpdateManyMutationInput {
  title: String
  description: String
  type: IntensityType
  coefficient: Float
}

input IntensityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  type: IntensityType
  type_not: IntensityType
  type_in: [IntensityType!]
  type_not_in: [IntensityType!]
  coefficient: Float
  coefficient_not: Float
  coefficient_in: [Float!]
  coefficient_not_in: [Float!]
  coefficient_lt: Float
  coefficient_lte: Float
  coefficient_gt: Float
  coefficient_gte: Float
  AND: [IntensityWhereInput!]
  OR: [IntensityWhereInput!]
  NOT: [IntensityWhereInput!]
}

input IntensityWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAdvancedSession(data: AdvancedSessionCreateInput!): AdvancedSession!
  updateAdvancedSession(data: AdvancedSessionUpdateInput!, where: AdvancedSessionWhereUniqueInput!): AdvancedSession
  updateManyAdvancedSessions(data: AdvancedSessionUpdateManyMutationInput!, where: AdvancedSessionWhereInput): BatchPayload!
  upsertAdvancedSession(where: AdvancedSessionWhereUniqueInput!, create: AdvancedSessionCreateInput!, update: AdvancedSessionUpdateInput!): AdvancedSession!
  deleteAdvancedSession(where: AdvancedSessionWhereUniqueInput!): AdvancedSession
  deleteManyAdvancedSessions(where: AdvancedSessionWhereInput): BatchPayload!
  createBout(data: BoutCreateInput!): Bout!
  updateManyBouts(data: BoutUpdateManyMutationInput!, where: BoutWhereInput): BatchPayload!
  deleteManyBouts(where: BoutWhereInput): BatchPayload!
  createIntensity(data: IntensityCreateInput!): Intensity!
  updateIntensity(data: IntensityUpdateInput!, where: IntensityWhereUniqueInput!): Intensity
  updateManyIntensities(data: IntensityUpdateManyMutationInput!, where: IntensityWhereInput): BatchPayload!
  upsertIntensity(where: IntensityWhereUniqueInput!, create: IntensityCreateInput!, update: IntensityUpdateInput!): Intensity!
  deleteIntensity(where: IntensityWhereUniqueInput!): Intensity
  deleteManyIntensities(where: IntensityWhereInput): BatchPayload!
  createPause(data: PauseCreateInput!): Pause!
  updatePause(data: PauseUpdateInput!, where: PauseWhereUniqueInput!): Pause
  updateManyPauses(data: PauseUpdateManyMutationInput!, where: PauseWhereInput): BatchPayload!
  upsertPause(where: PauseWhereUniqueInput!, create: PauseCreateInput!, update: PauseUpdateInput!): Pause!
  deletePause(where: PauseWhereUniqueInput!): Pause
  deleteManyPauses(where: PauseWhereInput): BatchPayload!
  createPhase(data: PhaseCreateInput!): Phase!
  updatePhase(data: PhaseUpdateInput!, where: PhaseWhereUniqueInput!): Phase
  updateManyPhases(data: PhaseUpdateManyMutationInput!, where: PhaseWhereInput): BatchPayload!
  upsertPhase(where: PhaseWhereUniqueInput!, create: PhaseCreateInput!, update: PhaseUpdateInput!): Phase!
  deletePhase(where: PhaseWhereUniqueInput!): Phase
  deleteManyPhases(where: PhaseWhereInput): BatchPayload!
  createPlan(data: PlanCreateInput!): Plan!
  updatePlan(data: PlanUpdateInput!, where: PlanWhereUniqueInput!): Plan
  updateManyPlans(data: PlanUpdateManyMutationInput!, where: PlanWhereInput): BatchPayload!
  upsertPlan(where: PlanWhereUniqueInput!, create: PlanCreateInput!, update: PlanUpdateInput!): Plan!
  deletePlan(where: PlanWhereUniqueInput!): Plan
  deleteManyPlans(where: PlanWhereInput): BatchPayload!
  createSession(data: SessionCreateInput!): Session!
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateManySessions(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  createSet(data: SetCreateInput!): Set!
  updateSet(data: SetUpdateInput!, where: SetWhereUniqueInput!): Set
  updateManySets(data: SetUpdateManyMutationInput!, where: SetWhereInput): BatchPayload!
  upsertSet(where: SetWhereUniqueInput!, create: SetCreateInput!, update: SetUpdateInput!): Set!
  deleteSet(where: SetWhereUniqueInput!): Set
  deleteManySets(where: SetWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWeek(data: WeekCreateInput!): Week!
  updateWeek(data: WeekUpdateInput!, where: WeekWhereUniqueInput!): Week
  updateManyWeeks(data: WeekUpdateManyMutationInput!, where: WeekWhereInput): BatchPayload!
  upsertWeek(where: WeekWhereUniqueInput!, create: WeekCreateInput!, update: WeekUpdateInput!): Week!
  deleteWeek(where: WeekWhereUniqueInput!): Week
  deleteManyWeeks(where: WeekWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pause {
  id: ID!
  duration: Int
  length: Int
  order: Int!
  type: PauseType!
  set: Set
  session: Session
}

type PauseConnection {
  pageInfo: PageInfo!
  edges: [PauseEdge]!
  aggregate: AggregatePause!
}

input PauseCreateInput {
  duration: Int
  length: Int
  order: Int!
  type: PauseType
  set: SetCreateOneWithoutPausesInput
  session: SessionCreateOneInput
}

input PauseCreateManyInput {
  create: [PauseCreateInput!]
  connect: [PauseWhereUniqueInput!]
}

input PauseCreateManyWithoutSetInput {
  create: [PauseCreateWithoutSetInput!]
  connect: [PauseWhereUniqueInput!]
}

input PauseCreateWithoutSetInput {
  duration: Int
  length: Int
  order: Int!
  type: PauseType
  session: SessionCreateOneInput
}

type PauseEdge {
  node: Pause!
  cursor: String!
}

enum PauseOrderByInput {
  id_ASC
  id_DESC
  duration_ASC
  duration_DESC
  length_ASC
  length_DESC
  order_ASC
  order_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PausePreviousValues {
  id: ID!
  duration: Int
  length: Int
  order: Int!
  type: PauseType!
}

input PauseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  length: Int
  length_not: Int
  length_in: [Int!]
  length_not_in: [Int!]
  length_lt: Int
  length_lte: Int
  length_gt: Int
  length_gte: Int
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  type: PauseType
  type_not: PauseType
  type_in: [PauseType!]
  type_not_in: [PauseType!]
  AND: [PauseScalarWhereInput!]
  OR: [PauseScalarWhereInput!]
  NOT: [PauseScalarWhereInput!]
}

type PauseSubscriptionPayload {
  mutation: MutationType!
  node: Pause
  updatedFields: [String!]
  previousValues: PausePreviousValues
}

input PauseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PauseWhereInput
  AND: [PauseSubscriptionWhereInput!]
  OR: [PauseSubscriptionWhereInput!]
  NOT: [PauseSubscriptionWhereInput!]
}

enum PauseType {
  Rest
  Active
}

input PauseUpdateDataInput {
  duration: Int
  length: Int
  order: Int
  type: PauseType
  set: SetUpdateOneWithoutPausesInput
  session: SessionUpdateOneInput
}

input PauseUpdateInput {
  duration: Int
  length: Int
  order: Int
  type: PauseType
  set: SetUpdateOneWithoutPausesInput
  session: SessionUpdateOneInput
}

input PauseUpdateManyDataInput {
  duration: Int
  length: Int
  order: Int
  type: PauseType
}

input PauseUpdateManyInput {
  create: [PauseCreateInput!]
  update: [PauseUpdateWithWhereUniqueNestedInput!]
  upsert: [PauseUpsertWithWhereUniqueNestedInput!]
  delete: [PauseWhereUniqueInput!]
  connect: [PauseWhereUniqueInput!]
  set: [PauseWhereUniqueInput!]
  disconnect: [PauseWhereUniqueInput!]
  deleteMany: [PauseScalarWhereInput!]
  updateMany: [PauseUpdateManyWithWhereNestedInput!]
}

input PauseUpdateManyMutationInput {
  duration: Int
  length: Int
  order: Int
  type: PauseType
}

input PauseUpdateManyWithoutSetInput {
  create: [PauseCreateWithoutSetInput!]
  delete: [PauseWhereUniqueInput!]
  connect: [PauseWhereUniqueInput!]
  set: [PauseWhereUniqueInput!]
  disconnect: [PauseWhereUniqueInput!]
  update: [PauseUpdateWithWhereUniqueWithoutSetInput!]
  upsert: [PauseUpsertWithWhereUniqueWithoutSetInput!]
  deleteMany: [PauseScalarWhereInput!]
  updateMany: [PauseUpdateManyWithWhereNestedInput!]
}

input PauseUpdateManyWithWhereNestedInput {
  where: PauseScalarWhereInput!
  data: PauseUpdateManyDataInput!
}

input PauseUpdateWithoutSetDataInput {
  duration: Int
  length: Int
  order: Int
  type: PauseType
  session: SessionUpdateOneInput
}

input PauseUpdateWithWhereUniqueNestedInput {
  where: PauseWhereUniqueInput!
  data: PauseUpdateDataInput!
}

input PauseUpdateWithWhereUniqueWithoutSetInput {
  where: PauseWhereUniqueInput!
  data: PauseUpdateWithoutSetDataInput!
}

input PauseUpsertWithWhereUniqueNestedInput {
  where: PauseWhereUniqueInput!
  update: PauseUpdateDataInput!
  create: PauseCreateInput!
}

input PauseUpsertWithWhereUniqueWithoutSetInput {
  where: PauseWhereUniqueInput!
  update: PauseUpdateWithoutSetDataInput!
  create: PauseCreateWithoutSetInput!
}

input PauseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  length: Int
  length_not: Int
  length_in: [Int!]
  length_not_in: [Int!]
  length_lt: Int
  length_lte: Int
  length_gt: Int
  length_gte: Int
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  type: PauseType
  type_not: PauseType
  type_in: [PauseType!]
  type_not_in: [PauseType!]
  set: SetWhereInput
  session: SessionWhereInput
  AND: [PauseWhereInput!]
  OR: [PauseWhereInput!]
  NOT: [PauseWhereInput!]
}

input PauseWhereUniqueInput {
  id: ID
}

type Phase {
  id: ID!
  title: String!
  description: String
  order: Int
  createdBy: User!
  weeks(where: WeekWhereInput, orderBy: WeekOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Week!]
  plan: Plan!
}

type PhaseConnection {
  pageInfo: PageInfo!
  edges: [PhaseEdge]!
  aggregate: AggregatePhase!
}

input PhaseCreateInput {
  title: String!
  description: String
  order: Int
  createdBy: UserCreateOneInput!
  weeks: WeekCreateManyWithoutPhaseInput
  plan: PlanCreateOneWithoutPhasesInput!
}

input PhaseCreateManyWithoutPlanInput {
  create: [PhaseCreateWithoutPlanInput!]
  connect: [PhaseWhereUniqueInput!]
}

input PhaseCreateOneWithoutWeeksInput {
  create: PhaseCreateWithoutWeeksInput
  connect: PhaseWhereUniqueInput
}

input PhaseCreateWithoutPlanInput {
  title: String!
  description: String
  order: Int
  createdBy: UserCreateOneInput!
  weeks: WeekCreateManyWithoutPhaseInput
}

input PhaseCreateWithoutWeeksInput {
  title: String!
  description: String
  order: Int
  createdBy: UserCreateOneInput!
  plan: PlanCreateOneWithoutPhasesInput!
}

type PhaseEdge {
  node: Phase!
  cursor: String!
}

enum PhaseOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  order_ASC
  order_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PhasePreviousValues {
  id: ID!
  title: String!
  description: String
  order: Int
}

input PhaseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [PhaseScalarWhereInput!]
  OR: [PhaseScalarWhereInput!]
  NOT: [PhaseScalarWhereInput!]
}

type PhaseSubscriptionPayload {
  mutation: MutationType!
  node: Phase
  updatedFields: [String!]
  previousValues: PhasePreviousValues
}

input PhaseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PhaseWhereInput
  AND: [PhaseSubscriptionWhereInput!]
  OR: [PhaseSubscriptionWhereInput!]
  NOT: [PhaseSubscriptionWhereInput!]
}

input PhaseUpdateInput {
  title: String
  description: String
  order: Int
  createdBy: UserUpdateOneRequiredInput
  weeks: WeekUpdateManyWithoutPhaseInput
  plan: PlanUpdateOneRequiredWithoutPhasesInput
}

input PhaseUpdateManyDataInput {
  title: String
  description: String
  order: Int
}

input PhaseUpdateManyMutationInput {
  title: String
  description: String
  order: Int
}

input PhaseUpdateManyWithoutPlanInput {
  create: [PhaseCreateWithoutPlanInput!]
  delete: [PhaseWhereUniqueInput!]
  connect: [PhaseWhereUniqueInput!]
  set: [PhaseWhereUniqueInput!]
  disconnect: [PhaseWhereUniqueInput!]
  update: [PhaseUpdateWithWhereUniqueWithoutPlanInput!]
  upsert: [PhaseUpsertWithWhereUniqueWithoutPlanInput!]
  deleteMany: [PhaseScalarWhereInput!]
  updateMany: [PhaseUpdateManyWithWhereNestedInput!]
}

input PhaseUpdateManyWithWhereNestedInput {
  where: PhaseScalarWhereInput!
  data: PhaseUpdateManyDataInput!
}

input PhaseUpdateOneWithoutWeeksInput {
  create: PhaseCreateWithoutWeeksInput
  update: PhaseUpdateWithoutWeeksDataInput
  upsert: PhaseUpsertWithoutWeeksInput
  delete: Boolean
  disconnect: Boolean
  connect: PhaseWhereUniqueInput
}

input PhaseUpdateWithoutPlanDataInput {
  title: String
  description: String
  order: Int
  createdBy: UserUpdateOneRequiredInput
  weeks: WeekUpdateManyWithoutPhaseInput
}

input PhaseUpdateWithoutWeeksDataInput {
  title: String
  description: String
  order: Int
  createdBy: UserUpdateOneRequiredInput
  plan: PlanUpdateOneRequiredWithoutPhasesInput
}

input PhaseUpdateWithWhereUniqueWithoutPlanInput {
  where: PhaseWhereUniqueInput!
  data: PhaseUpdateWithoutPlanDataInput!
}

input PhaseUpsertWithoutWeeksInput {
  update: PhaseUpdateWithoutWeeksDataInput!
  create: PhaseCreateWithoutWeeksInput!
}

input PhaseUpsertWithWhereUniqueWithoutPlanInput {
  where: PhaseWhereUniqueInput!
  update: PhaseUpdateWithoutPlanDataInput!
  create: PhaseCreateWithoutPlanInput!
}

input PhaseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  createdBy: UserWhereInput
  weeks_every: WeekWhereInput
  weeks_some: WeekWhereInput
  weeks_none: WeekWhereInput
  plan: PlanWhereInput
  AND: [PhaseWhereInput!]
  OR: [PhaseWhereInput!]
  NOT: [PhaseWhereInput!]
}

input PhaseWhereUniqueInput {
  id: ID
}

type Plan {
  id: ID!
  title: String!
  description: String
  createdBy: User!
  phases(where: PhaseWhereInput, orderBy: PhaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Phase!]
}

type PlanConnection {
  pageInfo: PageInfo!
  edges: [PlanEdge]!
  aggregate: AggregatePlan!
}

input PlanCreateInput {
  title: String!
  description: String
  createdBy: UserCreateOneWithoutPlansInput!
  phases: PhaseCreateManyWithoutPlanInput
}

input PlanCreateManyWithoutCreatedByInput {
  create: [PlanCreateWithoutCreatedByInput!]
  connect: [PlanWhereUniqueInput!]
}

input PlanCreateOneWithoutPhasesInput {
  create: PlanCreateWithoutPhasesInput
  connect: PlanWhereUniqueInput
}

input PlanCreateWithoutCreatedByInput {
  title: String!
  description: String
  phases: PhaseCreateManyWithoutPlanInput
}

input PlanCreateWithoutPhasesInput {
  title: String!
  description: String
  createdBy: UserCreateOneWithoutPlansInput!
}

type PlanEdge {
  node: Plan!
  cursor: String!
}

enum PlanOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PlanPreviousValues {
  id: ID!
  title: String!
  description: String
}

input PlanScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [PlanScalarWhereInput!]
  OR: [PlanScalarWhereInput!]
  NOT: [PlanScalarWhereInput!]
}

type PlanSubscriptionPayload {
  mutation: MutationType!
  node: Plan
  updatedFields: [String!]
  previousValues: PlanPreviousValues
}

input PlanSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlanWhereInput
  AND: [PlanSubscriptionWhereInput!]
  OR: [PlanSubscriptionWhereInput!]
  NOT: [PlanSubscriptionWhereInput!]
}

input PlanUpdateInput {
  title: String
  description: String
  createdBy: UserUpdateOneRequiredWithoutPlansInput
  phases: PhaseUpdateManyWithoutPlanInput
}

input PlanUpdateManyDataInput {
  title: String
  description: String
}

input PlanUpdateManyMutationInput {
  title: String
  description: String
}

input PlanUpdateManyWithoutCreatedByInput {
  create: [PlanCreateWithoutCreatedByInput!]
  delete: [PlanWhereUniqueInput!]
  connect: [PlanWhereUniqueInput!]
  set: [PlanWhereUniqueInput!]
  disconnect: [PlanWhereUniqueInput!]
  update: [PlanUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [PlanUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [PlanScalarWhereInput!]
  updateMany: [PlanUpdateManyWithWhereNestedInput!]
}

input PlanUpdateManyWithWhereNestedInput {
  where: PlanScalarWhereInput!
  data: PlanUpdateManyDataInput!
}

input PlanUpdateOneRequiredWithoutPhasesInput {
  create: PlanCreateWithoutPhasesInput
  update: PlanUpdateWithoutPhasesDataInput
  upsert: PlanUpsertWithoutPhasesInput
  connect: PlanWhereUniqueInput
}

input PlanUpdateWithoutCreatedByDataInput {
  title: String
  description: String
  phases: PhaseUpdateManyWithoutPlanInput
}

input PlanUpdateWithoutPhasesDataInput {
  title: String
  description: String
  createdBy: UserUpdateOneRequiredWithoutPlansInput
}

input PlanUpdateWithWhereUniqueWithoutCreatedByInput {
  where: PlanWhereUniqueInput!
  data: PlanUpdateWithoutCreatedByDataInput!
}

input PlanUpsertWithoutPhasesInput {
  update: PlanUpdateWithoutPhasesDataInput!
  create: PlanCreateWithoutPhasesInput!
}

input PlanUpsertWithWhereUniqueWithoutCreatedByInput {
  where: PlanWhereUniqueInput!
  update: PlanUpdateWithoutCreatedByDataInput!
  create: PlanCreateWithoutCreatedByInput!
}

input PlanWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdBy: UserWhereInput
  phases_every: PhaseWhereInput
  phases_some: PhaseWhereInput
  phases_none: PhaseWhereInput
  AND: [PlanWhereInput!]
  OR: [PlanWhereInput!]
  NOT: [PlanWhereInput!]
}

input PlanWhereUniqueInput {
  id: ID
}

type Query {
  advancedSession(where: AdvancedSessionWhereUniqueInput!): AdvancedSession
  advancedSessions(where: AdvancedSessionWhereInput, orderBy: AdvancedSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AdvancedSession]!
  advancedSessionsConnection(where: AdvancedSessionWhereInput, orderBy: AdvancedSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdvancedSessionConnection!
  bouts(where: BoutWhereInput, orderBy: BoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bout]!
  boutsConnection(where: BoutWhereInput, orderBy: BoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoutConnection!
  intensity(where: IntensityWhereUniqueInput!): Intensity
  intensities(where: IntensityWhereInput, orderBy: IntensityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Intensity]!
  intensitiesConnection(where: IntensityWhereInput, orderBy: IntensityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IntensityConnection!
  pause(where: PauseWhereUniqueInput!): Pause
  pauses(where: PauseWhereInput, orderBy: PauseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pause]!
  pausesConnection(where: PauseWhereInput, orderBy: PauseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PauseConnection!
  phase(where: PhaseWhereUniqueInput!): Phase
  phases(where: PhaseWhereInput, orderBy: PhaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Phase]!
  phasesConnection(where: PhaseWhereInput, orderBy: PhaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhaseConnection!
  plan(where: PlanWhereUniqueInput!): Plan
  plans(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plan]!
  plansConnection(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlanConnection!
  session(where: SessionWhereUniqueInput!): Session
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  set(where: SetWhereUniqueInput!): Set
  sets(where: SetWhereInput, orderBy: SetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Set]!
  setsConnection(where: SetWhereInput, orderBy: SetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SetConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  week(where: WeekWhereUniqueInput!): Week
  weeks(where: WeekWhereInput, orderBy: WeekOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Week]!
  weeksConnection(where: WeekWhereInput, orderBy: WeekOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WeekConnection!
  node(id: ID!): Node
}

type Session {
  id: ID!
  title: String
  purpose: String
  day: Int
  createdBy: User!
  description: String
}

type SessionConnection {
  pageInfo: PageInfo!
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  title: String
  purpose: String
  day: Int
  createdBy: UserCreateOneInput!
  description: String
}

input SessionCreateManyInput {
  create: [SessionCreateInput!]
  connect: [SessionWhereUniqueInput!]
}

input SessionCreateOneInput {
  create: SessionCreateInput
  connect: SessionWhereUniqueInput
}

type SessionEdge {
  node: Session!
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  purpose_ASC
  purpose_DESC
  day_ASC
  day_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SessionPreviousValues {
  id: ID!
  title: String
  purpose: String
  day: Int
  description: String
}

input SessionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  purpose: String
  purpose_not: String
  purpose_in: [String!]
  purpose_not_in: [String!]
  purpose_lt: String
  purpose_lte: String
  purpose_gt: String
  purpose_gte: String
  purpose_contains: String
  purpose_not_contains: String
  purpose_starts_with: String
  purpose_not_starts_with: String
  purpose_ends_with: String
  purpose_not_ends_with: String
  day: Int
  day_not: Int
  day_in: [Int!]
  day_not_in: [Int!]
  day_lt: Int
  day_lte: Int
  day_gt: Int
  day_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [SessionScalarWhereInput!]
  OR: [SessionScalarWhereInput!]
  NOT: [SessionScalarWhereInput!]
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
  AND: [SessionSubscriptionWhereInput!]
  OR: [SessionSubscriptionWhereInput!]
  NOT: [SessionSubscriptionWhereInput!]
}

input SessionUpdateDataInput {
  title: String
  purpose: String
  day: Int
  createdBy: UserUpdateOneRequiredInput
  description: String
}

input SessionUpdateInput {
  title: String
  purpose: String
  day: Int
  createdBy: UserUpdateOneRequiredInput
  description: String
}

input SessionUpdateManyDataInput {
  title: String
  purpose: String
  day: Int
  description: String
}

input SessionUpdateManyInput {
  create: [SessionCreateInput!]
  update: [SessionUpdateWithWhereUniqueNestedInput!]
  upsert: [SessionUpsertWithWhereUniqueNestedInput!]
  delete: [SessionWhereUniqueInput!]
  connect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  disconnect: [SessionWhereUniqueInput!]
  deleteMany: [SessionScalarWhereInput!]
  updateMany: [SessionUpdateManyWithWhereNestedInput!]
}

input SessionUpdateManyMutationInput {
  title: String
  purpose: String
  day: Int
  description: String
}

input SessionUpdateManyWithWhereNestedInput {
  where: SessionScalarWhereInput!
  data: SessionUpdateManyDataInput!
}

input SessionUpdateOneInput {
  create: SessionCreateInput
  update: SessionUpdateDataInput
  upsert: SessionUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: SessionWhereUniqueInput
}

input SessionUpdateWithWhereUniqueNestedInput {
  where: SessionWhereUniqueInput!
  data: SessionUpdateDataInput!
}

input SessionUpsertNestedInput {
  update: SessionUpdateDataInput!
  create: SessionCreateInput!
}

input SessionUpsertWithWhereUniqueNestedInput {
  where: SessionWhereUniqueInput!
  update: SessionUpdateDataInput!
  create: SessionCreateInput!
}

input SessionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  purpose: String
  purpose_not: String
  purpose_in: [String!]
  purpose_not_in: [String!]
  purpose_lt: String
  purpose_lte: String
  purpose_gt: String
  purpose_gte: String
  purpose_contains: String
  purpose_not_contains: String
  purpose_starts_with: String
  purpose_not_starts_with: String
  purpose_ends_with: String
  purpose_not_ends_with: String
  day: Int
  day_not: Int
  day_in: [Int!]
  day_not_in: [Int!]
  day_lt: Int
  day_lte: Int
  day_gt: Int
  day_gte: Int
  createdBy: UserWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
}

input SessionWhereUniqueInput {
  id: ID
}

type Set {
  id: ID!
  title: String!
  order: Int!
  bouts(where: BoutWhereInput, orderBy: BoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bout!]
  pauses(where: PauseWhereInput, orderBy: PauseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pause!]
  session: Session
}

type SetConnection {
  pageInfo: PageInfo!
  edges: [SetEdge]!
  aggregate: AggregateSet!
}

input SetCreateInput {
  title: String!
  order: Int!
  bouts: BoutCreateManyWithoutSetInput
  pauses: PauseCreateManyWithoutSetInput
  session: SessionCreateOneInput
}

input SetCreateManyInput {
  create: [SetCreateInput!]
  connect: [SetWhereUniqueInput!]
}

input SetCreateOneWithoutBoutsInput {
  create: SetCreateWithoutBoutsInput
  connect: SetWhereUniqueInput
}

input SetCreateOneWithoutPausesInput {
  create: SetCreateWithoutPausesInput
  connect: SetWhereUniqueInput
}

input SetCreateWithoutBoutsInput {
  title: String!
  order: Int!
  pauses: PauseCreateManyWithoutSetInput
  session: SessionCreateOneInput
}

input SetCreateWithoutPausesInput {
  title: String!
  order: Int!
  bouts: BoutCreateManyWithoutSetInput
  session: SessionCreateOneInput
}

type SetEdge {
  node: Set!
  cursor: String!
}

enum SetOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  order_ASC
  order_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SetPreviousValues {
  id: ID!
  title: String!
  order: Int!
}

input SetScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [SetScalarWhereInput!]
  OR: [SetScalarWhereInput!]
  NOT: [SetScalarWhereInput!]
}

type SetSubscriptionPayload {
  mutation: MutationType!
  node: Set
  updatedFields: [String!]
  previousValues: SetPreviousValues
}

input SetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SetWhereInput
  AND: [SetSubscriptionWhereInput!]
  OR: [SetSubscriptionWhereInput!]
  NOT: [SetSubscriptionWhereInput!]
}

input SetUpdateDataInput {
  title: String
  order: Int
  bouts: BoutUpdateManyWithoutSetInput
  pauses: PauseUpdateManyWithoutSetInput
  session: SessionUpdateOneInput
}

input SetUpdateInput {
  title: String
  order: Int
  bouts: BoutUpdateManyWithoutSetInput
  pauses: PauseUpdateManyWithoutSetInput
  session: SessionUpdateOneInput
}

input SetUpdateManyDataInput {
  title: String
  order: Int
}

input SetUpdateManyInput {
  create: [SetCreateInput!]
  update: [SetUpdateWithWhereUniqueNestedInput!]
  upsert: [SetUpsertWithWhereUniqueNestedInput!]
  delete: [SetWhereUniqueInput!]
  connect: [SetWhereUniqueInput!]
  set: [SetWhereUniqueInput!]
  disconnect: [SetWhereUniqueInput!]
  deleteMany: [SetScalarWhereInput!]
  updateMany: [SetUpdateManyWithWhereNestedInput!]
}

input SetUpdateManyMutationInput {
  title: String
  order: Int
}

input SetUpdateManyWithWhereNestedInput {
  where: SetScalarWhereInput!
  data: SetUpdateManyDataInput!
}

input SetUpdateOneWithoutPausesInput {
  create: SetCreateWithoutPausesInput
  update: SetUpdateWithoutPausesDataInput
  upsert: SetUpsertWithoutPausesInput
  delete: Boolean
  disconnect: Boolean
  connect: SetWhereUniqueInput
}

input SetUpdateWithoutPausesDataInput {
  title: String
  order: Int
  bouts: BoutUpdateManyWithoutSetInput
  session: SessionUpdateOneInput
}

input SetUpdateWithWhereUniqueNestedInput {
  where: SetWhereUniqueInput!
  data: SetUpdateDataInput!
}

input SetUpsertWithoutPausesInput {
  update: SetUpdateWithoutPausesDataInput!
  create: SetCreateWithoutPausesInput!
}

input SetUpsertWithWhereUniqueNestedInput {
  where: SetWhereUniqueInput!
  update: SetUpdateDataInput!
  create: SetCreateInput!
}

input SetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  bouts_every: BoutWhereInput
  bouts_some: BoutWhereInput
  bouts_none: BoutWhereInput
  pauses_every: PauseWhereInput
  pauses_some: PauseWhereInput
  pauses_none: PauseWhereInput
  session: SessionWhereInput
  AND: [SetWhereInput!]
  OR: [SetWhereInput!]
  NOT: [SetWhereInput!]
}

input SetWhereUniqueInput {
  id: ID
}

type Subscription {
  advancedSession(where: AdvancedSessionSubscriptionWhereInput): AdvancedSessionSubscriptionPayload
  bout(where: BoutSubscriptionWhereInput): BoutSubscriptionPayload
  intensity(where: IntensitySubscriptionWhereInput): IntensitySubscriptionPayload
  pause(where: PauseSubscriptionWhereInput): PauseSubscriptionPayload
  phase(where: PhaseSubscriptionWhereInput): PhaseSubscriptionPayload
  plan(where: PlanSubscriptionWhereInput): PlanSubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  set(where: SetSubscriptionWhereInput): SetSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  week(where: WeekSubscriptionWhereInput): WeekSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  plans(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plan!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  plans: PlanCreateManyWithoutCreatedByInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPlansInput {
  create: UserCreateWithoutPlansInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPlansInput {
  name: String!
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  plans: PlanUpdateManyWithoutCreatedByInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  plans: PlanUpdateManyWithoutCreatedByInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPlansInput {
  create: UserCreateWithoutPlansInput
  update: UserUpdateWithoutPlansDataInput
  upsert: UserUpsertWithoutPlansInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPlansDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutPlansInput {
  update: UserUpdateWithoutPlansDataInput!
  create: UserCreateWithoutPlansInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  plans_every: PlanWhereInput
  plans_some: PlanWhereInput
  plans_none: PlanWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Week {
  id: ID!
  description: String
  order: Int
  createdBy: User!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session!]
  phase: Phase
}

type WeekConnection {
  pageInfo: PageInfo!
  edges: [WeekEdge]!
  aggregate: AggregateWeek!
}

input WeekCreateInput {
  description: String
  order: Int
  createdBy: UserCreateOneInput!
  sessions: SessionCreateManyInput
  phase: PhaseCreateOneWithoutWeeksInput
}

input WeekCreateManyInput {
  create: [WeekCreateInput!]
  connect: [WeekWhereUniqueInput!]
}

input WeekCreateManyWithoutPhaseInput {
  create: [WeekCreateWithoutPhaseInput!]
  connect: [WeekWhereUniqueInput!]
}

input WeekCreateWithoutPhaseInput {
  description: String
  order: Int
  createdBy: UserCreateOneInput!
  sessions: SessionCreateManyInput
}

type WeekEdge {
  node: Week!
  cursor: String!
}

enum WeekOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  order_ASC
  order_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WeekPreviousValues {
  id: ID!
  description: String
  order: Int
}

input WeekScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [WeekScalarWhereInput!]
  OR: [WeekScalarWhereInput!]
  NOT: [WeekScalarWhereInput!]
}

type WeekSubscriptionPayload {
  mutation: MutationType!
  node: Week
  updatedFields: [String!]
  previousValues: WeekPreviousValues
}

input WeekSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WeekWhereInput
  AND: [WeekSubscriptionWhereInput!]
  OR: [WeekSubscriptionWhereInput!]
  NOT: [WeekSubscriptionWhereInput!]
}

input WeekUpdateDataInput {
  description: String
  order: Int
  createdBy: UserUpdateOneRequiredInput
  sessions: SessionUpdateManyInput
  phase: PhaseUpdateOneWithoutWeeksInput
}

input WeekUpdateInput {
  description: String
  order: Int
  createdBy: UserUpdateOneRequiredInput
  sessions: SessionUpdateManyInput
  phase: PhaseUpdateOneWithoutWeeksInput
}

input WeekUpdateManyDataInput {
  description: String
  order: Int
}

input WeekUpdateManyInput {
  create: [WeekCreateInput!]
  update: [WeekUpdateWithWhereUniqueNestedInput!]
  upsert: [WeekUpsertWithWhereUniqueNestedInput!]
  delete: [WeekWhereUniqueInput!]
  connect: [WeekWhereUniqueInput!]
  set: [WeekWhereUniqueInput!]
  disconnect: [WeekWhereUniqueInput!]
  deleteMany: [WeekScalarWhereInput!]
  updateMany: [WeekUpdateManyWithWhereNestedInput!]
}

input WeekUpdateManyMutationInput {
  description: String
  order: Int
}

input WeekUpdateManyWithoutPhaseInput {
  create: [WeekCreateWithoutPhaseInput!]
  delete: [WeekWhereUniqueInput!]
  connect: [WeekWhereUniqueInput!]
  set: [WeekWhereUniqueInput!]
  disconnect: [WeekWhereUniqueInput!]
  update: [WeekUpdateWithWhereUniqueWithoutPhaseInput!]
  upsert: [WeekUpsertWithWhereUniqueWithoutPhaseInput!]
  deleteMany: [WeekScalarWhereInput!]
  updateMany: [WeekUpdateManyWithWhereNestedInput!]
}

input WeekUpdateManyWithWhereNestedInput {
  where: WeekScalarWhereInput!
  data: WeekUpdateManyDataInput!
}

input WeekUpdateWithoutPhaseDataInput {
  description: String
  order: Int
  createdBy: UserUpdateOneRequiredInput
  sessions: SessionUpdateManyInput
}

input WeekUpdateWithWhereUniqueNestedInput {
  where: WeekWhereUniqueInput!
  data: WeekUpdateDataInput!
}

input WeekUpdateWithWhereUniqueWithoutPhaseInput {
  where: WeekWhereUniqueInput!
  data: WeekUpdateWithoutPhaseDataInput!
}

input WeekUpsertWithWhereUniqueNestedInput {
  where: WeekWhereUniqueInput!
  update: WeekUpdateDataInput!
  create: WeekCreateInput!
}

input WeekUpsertWithWhereUniqueWithoutPhaseInput {
  where: WeekWhereUniqueInput!
  update: WeekUpdateWithoutPhaseDataInput!
  create: WeekCreateWithoutPhaseInput!
}

input WeekWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  createdBy: UserWhereInput
  sessions_every: SessionWhereInput
  sessions_some: SessionWhereInput
  sessions_none: SessionWhereInput
  phase: PhaseWhereInput
  AND: [WeekWhereInput!]
  OR: [WeekWhereInput!]
  NOT: [WeekWhereInput!]
}

input WeekWhereUniqueInput {
  id: ID
}
`
      }
    