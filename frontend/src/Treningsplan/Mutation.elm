-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Treningsplan.Mutation exposing (AddWorkoutPartOptionalArguments, AddWorkoutPartRequiredArguments, CreateWorkoutOptionalArguments, CreateWorkoutRequiredArguments, addWorkoutPart, createWorkout)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Treningsplan.InputObject
import Treningsplan.Interface
import Treningsplan.Object
import Treningsplan.Scalar
import Treningsplan.ScalarCodecs
import Treningsplan.Union


type alias AddWorkoutPartOptionalArguments =
    { metric : OptionalArgument String }


type alias AddWorkoutPartRequiredArguments =
    { workoutId : String
    , order : Int
    , distance : Int
    , intensityId : String
    }


{-|

  - workoutId -
  - order -
  - distance -
  - metric -
  - intensityId -

-}
addWorkoutPart : (AddWorkoutPartOptionalArguments -> AddWorkoutPartOptionalArguments) -> AddWorkoutPartRequiredArguments -> SelectionSet decodesTo Treningsplan.Object.WorkoutV2 -> SelectionSet (Maybe decodesTo) RootMutation
addWorkoutPart fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { metric = Absent }

        optionalArgs =
            [ Argument.optional "metric" filledInOptionals.metric Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "addWorkoutPart" (optionalArgs ++ [ Argument.required "workoutId" requiredArgs.workoutId Encode.string, Argument.required "order" requiredArgs.order Encode.int, Argument.required "distance" requiredArgs.distance Encode.int, Argument.required "intensityId" requiredArgs.intensityId Encode.string ]) object_ (identity >> Decode.nullable)


type alias CreateWorkoutOptionalArguments =
    { description : OptionalArgument String }


type alias CreateWorkoutRequiredArguments =
    { name : String }


{-|

  - description -
  - name -

-}
createWorkout : (CreateWorkoutOptionalArguments -> CreateWorkoutOptionalArguments) -> CreateWorkoutRequiredArguments -> SelectionSet decodesTo Treningsplan.Object.WorkoutV2 -> SelectionSet (Maybe decodesTo) RootMutation
createWorkout fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { description = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "createWorkout" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string ]) object_ (identity >> Decode.nullable)
