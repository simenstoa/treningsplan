-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Treningsplan.Enum.Metric exposing (Metric(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Meter -
  - Minute -

-}
type Metric
    = Meter
    | Minute


list : List Metric
list =
    [ Meter, Minute ]


decoder : Decoder Metric
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "METER" ->
                        Decode.succeed Meter

                    "MINUTE" ->
                        Decode.succeed Minute

                    _ ->
                        Decode.fail ("Invalid Metric type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Metric -> String
toString enum =
    case enum of
        Meter ->
            "METER"

        Minute ->
            "MINUTE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Metric
fromString enumString =
    case enumString of
        "METER" ->
            Just Meter

        "MINUTE" ->
            Just Minute

        _ ->
            Nothing
